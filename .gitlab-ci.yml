default:
  image: node:16-alpine
  before_script:
    - apk add --no-cache libc6-compat

stages:
  - build
  - test
  - image-push
  - deploy-feature-stand
  - deploy-production

variables:
  HOST: "84.201.142.197"

cache:
  paths:
    - node_modules/

build-job:
  stage: build
  only:
  - merge_requests
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - npm run build

unit-test-job:
  stage: test
  only:
  - merge_requests
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - echo "Start unit tests"
    - echo "Done!"

intg-test-job:
  stage: test
  only:
  - merge_requests
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - echo "Start integration tests"
    - echo "Done!"

image-push-job:
  stage: image-push
  image: docker:20.10.7
  services:
    - docker:20.10.7-dind
  variables:
    IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
  rules:
    - if: $CI_MERGE_REQUEST_ASSIGNEES && $CI_COMMIT_REF_SLUG != "master"
      variables:
        IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_MERGE_REQUEST_ASSIGNEES
    - if: $CI_COMMIT_REF_SLUG == "master"
      variables:
        IMAGE_TAG: $CI_REGISTRY_IMAGE:production
    - if: $CI_MERGE_REQUEST_ASSIGNEES == null && $CI_COMMIT_REF_SLUG != "master"
      when: never
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build -t $IMAGE_TAG .
    - docker push $IMAGE_TAG

deploy-feature-stand-job:
  stage: deploy-feature-stand
  image: docker:20.10.7
  services:
    - docker:20.10.7-dind
  variables:
    DOCKER_HOST: "tcp://${HOST}:2376"
    DOCKER_TLS_VERIFY: 1
    DOCKER_CERT_PATH: "/certs"
    APP_NAME: $CI_MERGE_REQUEST_ASSIGNEES
  rules:
    - if: $CI_MERGE_REQUEST_ASSIGNEES == "spelot"
      variables:
        PORT: "3001"
    - if: $CI_MERGE_REQUEST_ASSIGNEES == "demidov1109"
      variables:
        PORT: "3002"
    - if: $CI_MERGE_REQUEST_ASSIGNEES == "dmahno"
      variables:
        PORT: "3003"
    - if: $CI_MERGE_REQUEST_ASSIGNEES == "wansmer"
      variables:
        PORT: "3004"
    - if: $CI_COMMIT_REF_SLUG == "master"
      when: never
  before_script:
    - export IMAGE_TAG=$APP_NAME
    - export REGISTRY_IMAGE=$CI_REGISTRY_IMAGE
    - export PORT=$PORT
    - mkdir -p $DOCKER_CERT_PATH
    - echo "$TLSCACERT" > $DOCKER_CERT_PATH/ca.pem
    - echo "$TLSCERT" > $DOCKER_CERT_PATH/cert.pem
    - echo "$TLSKEY" > $DOCKER_CERT_PATH/key.pem
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker stack deploy --with-registry-auth -c ./docker-compose.yml $APP_NAME
  after_script:
    - docker service update "${APP_NAME}_app"

deploy-production-job:
  stage: deploy-production
  image: docker:20.10.7
  services:
    - docker:20.10.7-dind
  variables:
    DOCKER_HOST: "tcp://${HOST}:2376"
    DOCKER_TLS_VERIFY: 1
    DOCKER_CERT_PATH: "/certs"
    APP_NAME: $CI_COMMIT_REF_SLUG
    PORT: "3000"
  rules:
    - if: $CI_COMMIT_REF_SLUG == "master"
  before_script:
    - export IMAGE_TAG="production"
    - export REGISTRY_IMAGE=$CI_REGISTRY_IMAGE
    - export PORT=$PORT
    - mkdir -p $DOCKER_CERT_PATH
    - echo "$TLSCACERT" > $DOCKER_CERT_PATH/ca.pem
    - echo "$TLSCERT" > $DOCKER_CERT_PATH/cert.pem
    - echo "$TLSKEY" > $DOCKER_CERT_PATH/key.pem
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker stack deploy --with-registry-auth -c ./docker-compose.yml $APP_NAME
  after_script:
    - docker service update "${APP_NAME}_app"
